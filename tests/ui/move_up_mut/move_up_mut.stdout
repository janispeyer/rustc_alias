# Analysing main
# Analysing move_up_mut
# MaybeTopOfBorrowStack Analysis
bb0
[ 0] [_1, _2] -> Retag([fn entry] _1)
[ 1] [_1, _2] -> Retag([fn entry] _2)
[ 2] [_1, _2] -> (*_1) = const 42_i32
[ 3] [_1, _2] -> (*_2) = const 7_i32
[ 4] [_1, _2] -> _0 = (*_1)
[ 5] [_1, _2] -> return

# FindImmutabilitySpans Analysis
bb0
[ 0] {} -> Retag([fn entry] _1)
[ 1] {} -> Retag([fn entry] _2)
[ 2] {_1: Span(bb0[2])} -> (*_1) = const 42_i32
[ 3] {_1: Span(bb0[2]), _2: Span(bb0[3])} -> (*_2) = const 7_i32
[ 4] {_1: Span(bb0[2]), _2: Span(bb0[3])} -> _0 = (*_1)
[ 5] {_1: Span(bb0[2]), _2: Span(bb0[3])} -> return


# CFG Before
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            (*_1) = const 42_i32,
            (*_2) = const 7_i32,
            _0 = (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up_mut.rs:7:2: 7:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
# CFG After
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            _4 = const 42_i32,
            (*_1) = _4,
            _5 = const 7_i32,
            (*_2) = _5,
            _0 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up_mut.rs:7:2: 7:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]

