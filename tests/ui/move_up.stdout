# Analysing main
# Analysing move_up
# MaybeTopOfBorrowStack Analysis
bb0
[ 0] [_1, _2] -> Retag([fn entry] _1)
[ 1] [_1, _2] -> Retag([fn entry] _2)
[ 2] [_1, _2] -> StorageLive(_4)
[ 3] [_1, _2] -> StorageLive(_5)
[ 4] [_1, _2] -> _5 = (*_1)
[ 5] [_1, _2] -> _6 = Eq(const 3_i32, const 0_i32)
[ 6] [_1, _2] -> assert(!move _6, "attempt to divide `{}` by zero", _5) -> [success: bb1, unwind: bb7]

bb1
[ 0] [_1, _2] -> _7 = Eq(const 3_i32, const -1_i32)
[ 1] [_1, _2] -> _8 = Eq(_5, const i32::MIN)
[ 2] [_1, _2] -> _9 = BitAnd(move _7, move _8)
[ 3] [_1, _2] -> assert(!move _9, "attempt to compute `{} / {}`, which would overflow", _5, const 3_i32) -> [success: bb2, unwind: bb7]

bb2
[ 0] [_1, _2] -> _4 = Div(move _5, const 3_i32)
[ 1] [_1, _2] -> StorageDead(_5)
[ 2] [_1, _2] -> StorageLive(_10)
[ 3] [_1, _2] -> StorageLive(_11)
[ 4] [_1] -> _11 = &mut _2
[ 5] [_1] -> Retag(_11)
[ 6] [_1] -> StorageLive(_12)
[ 7] [_1] -> StorageLive(_13)
[ 8] [] -> _13 = &(*_1)
[ 9] [] -> Retag(_13)
[10] [] -> StorageLive(_14)
[11] [] -> _14 = _4
[12] [] -> Deinit(_12)
[13] [] -> (_12.0: &i32) = move _13
[14] [] -> (_12.1: i32) = move _14
[15] [] -> Retag(_12)
[16] [] -> _10 = <impl FnMut(&i32, i32) as std::ops::FnMut<(&i32, i32)>>::call_mut(move _11, move _12) -> [return: bb3, unwind: bb7]

bb3
[ 0] [] -> StorageDead(_14)
[ 1] [] -> StorageDead(_13)
[ 2] [] -> StorageDead(_12)
[ 3] [] -> StorageDead(_11)
[ 4] [] -> StorageDead(_10)
[ 5] [] -> StorageLive(_15)
[ 6] [] -> _15 = (*_1)
[ 7] [] -> _16 = Eq(const 3_i32, const 0_i32)
[ 8] [] -> assert(!move _16, "attempt to divide `{}` by zero", _15) -> [success: bb4, unwind: bb7]

bb4
[ 0] [] -> _17 = Eq(const 3_i32, const -1_i32)
[ 1] [] -> _18 = Eq(_15, const i32::MIN)
[ 2] [] -> _19 = BitAnd(move _17, move _18)
[ 3] [] -> assert(!move _19, "attempt to compute `{} / {}`, which would overflow", _15, const 3_i32) -> [success: bb5, unwind: bb7]

bb5
[ 0] [] -> _0 = Div(move _15, const 3_i32)
[ 1] [] -> StorageDead(_15)
[ 2] [] -> StorageDead(_4)
[ 3] [] -> drop(_2) -> [return: bb6, unwind: bb8]

bb6
[ 0] [] -> return

bb7
[ 0] [_1] -> drop(_2) -> bb8

bb8
[ 0] [_1] -> resume

# FindImmutabilitySpans Analysis
bb0
[ 0] {} -> Retag([fn entry] _1)
[ 1] {} -> Retag([fn entry] _2)
[ 2] {} -> StorageLive(_4)
[ 3] {} -> StorageLive(_5)
[ 4] {} -> _5 = (*_1)
[ 5] {} -> _6 = Eq(const 3_i32, const 0_i32)
[ 6] {} -> assert(!move _6, "attempt to divide `{}` by zero", _5) -> [success: bb1, unwind: bb7]

bb7
[ 0] {} -> drop(_2) -> bb8

bb8
[ 0] {} -> resume

bb1
[ 0] {} -> _7 = Eq(const 3_i32, const -1_i32)
[ 1] {} -> _8 = Eq(_5, const i32::MIN)
[ 2] {} -> _9 = BitAnd(move _7, move _8)
[ 3] {} -> assert(!move _9, "attempt to compute `{} / {}`, which would overflow", _5, const 3_i32) -> [success: bb2, unwind: bb7]

bb2
[ 0] {} -> _4 = Div(move _5, const 3_i32)
[ 1] {} -> StorageDead(_5)
[ 2] {} -> StorageLive(_10)
[ 3] {} -> StorageLive(_11)
[ 4] {} -> _11 = &mut _2
[ 5] {} -> Retag(_11)
[ 6] {} -> StorageLive(_12)
[ 7] {} -> StorageLive(_13)
[ 8] {} -> _13 = &(*_1)
[ 9] {} -> Retag(_13)
[10] {} -> StorageLive(_14)
[11] {} -> _14 = _4
[12] {} -> Deinit(_12)
[13] {} -> (_12.0: &i32) = move _13
[14] {} -> (_12.1: i32) = move _14
[15] {} -> Retag(_12)
[16] {} -> _10 = <impl FnMut(&i32, i32) as std::ops::FnMut<(&i32, i32)>>::call_mut(move _11, move _12) -> [return: bb3, unwind: bb7]

bb3
[ 0] {} -> StorageDead(_14)
[ 1] {} -> StorageDead(_13)
[ 2] {} -> StorageDead(_12)
[ 3] {} -> StorageDead(_11)
[ 4] {} -> StorageDead(_10)
[ 5] {} -> StorageLive(_15)
[ 6] {} -> _15 = (*_1)
[ 7] {} -> _16 = Eq(const 3_i32, const 0_i32)
[ 8] {} -> assert(!move _16, "attempt to divide `{}` by zero", _15) -> [success: bb4, unwind: bb7]

bb4
[ 0] {} -> _17 = Eq(const 3_i32, const -1_i32)
[ 1] {} -> _18 = Eq(_15, const i32::MIN)
[ 2] {} -> _19 = BitAnd(move _17, move _18)
[ 3] {} -> assert(!move _19, "attempt to compute `{} / {}`, which would overflow", _15, const 3_i32) -> [success: bb5, unwind: bb7]

bb5
[ 0] {} -> _0 = Div(move _15, const 3_i32)
[ 1] {} -> StorageDead(_15)
[ 2] {} -> StorageDead(_4)
[ 3] {} -> drop(_2) -> [return: bb6, unwind: bb8]

bb6
[ 0] {} -> return


# CFG Before
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = (*_1),
            _6 = Eq(const 3_i32, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:4:15: 4:21 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _6, "attempt to divide `{}` by zero", _5) -> [success: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Eq(const 3_i32, const -1_i32),
            _8 = Eq(_5, const i32::MIN),
            _9 = BitAnd(move _7, move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:4:15: 4:21 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _9, "attempt to compute `{} / {}`, which would overflow", _5, const 3_i32) -> [success: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = Div(move _5, const 3_i32),
            StorageDead(_5),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _2,
            Retag(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
            Retag(_13),
            StorageLive(_14),
            _14 = _4,
            Deinit(_12),
            (_12.0: &i32) = move _13,
            (_12.1: i32) = move _14,
            Retag(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:5:5: 5:14 (#0),
                    scope: scope[1],
                },
                kind: _10 = <impl FnMut(&i32, i32) as std::ops::FnMut<(&i32, i32)>>::call_mut(move _11, move _12) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_15),
            _15 = (*_1),
            _16 = Eq(const 3_i32, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:6:12: 6:18 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _16, "attempt to divide `{}` by zero", _15) -> [success: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = Eq(const 3_i32, const -1_i32),
            _18 = Eq(_15, const i32::MIN),
            _19 = BitAnd(move _17, move _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:6:12: 6:18 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _19, "attempt to compute `{} / {}`, which would overflow", _15, const 3_i32) -> [success: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = Div(move _15, const 3_i32),
            StorageDead(_15),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:7:1: 7:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:7:2: 7:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:7:1: 7:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> bb8,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:3:1: 7:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
# CFG After
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = (*_1),
            _6 = Eq(const 3_i32, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:4:15: 4:21 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _6, "attempt to divide `{}` by zero", _5) -> [success: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Eq(const 3_i32, const -1_i32),
            _8 = Eq(_5, const i32::MIN),
            _9 = BitAnd(move _7, move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:4:15: 4:21 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _9, "attempt to compute `{} / {}`, which would overflow", _5, const 3_i32) -> [success: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = Div(move _5, const 3_i32),
            StorageDead(_5),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _2,
            Retag(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
            Retag(_13),
            StorageLive(_14),
            _14 = _4,
            Deinit(_12),
            (_12.0: &i32) = move _13,
            (_12.1: i32) = move _14,
            Retag(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:5:5: 5:14 (#0),
                    scope: scope[1],
                },
                kind: _10 = <impl FnMut(&i32, i32) as std::ops::FnMut<(&i32, i32)>>::call_mut(move _11, move _12) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_15),
            _15 = (*_1),
            _16 = Eq(const 3_i32, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:6:12: 6:18 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _16, "attempt to divide `{}` by zero", _15) -> [success: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = Eq(const 3_i32, const -1_i32),
            _18 = Eq(_15, const i32::MIN),
            _19 = BitAnd(move _17, move _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:6:12: 6:18 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _19, "attempt to compute `{} / {}`, which would overflow", _15, const 3_i32) -> [success: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = Div(move _15, const 3_i32),
            StorageDead(_15),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:7:1: 7:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:7:2: 7:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:7:1: 7:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> bb8,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:3:1: 7:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]

# Analysing main::{closure#0}
# MaybeTopOfBorrowStack Analysis
bb0
[ 0] [_1, _2] -> Retag([fn entry] _1)
[ 1] [_1, _2] -> Retag([fn entry] _2)
[ 2] [_1, _2] -> _0 = const ()
[ 3] [_1, _2] -> return

# FindImmutabilitySpans Analysis
bb0
[ 0] {} -> Retag([fn entry] _1)
[ 1] {} -> Retag([fn entry] _2)
[ 2] {} -> _0 = const ()
[ 3] {} -> return


# CFG Before
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:11:26: 11:26 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
# CFG After
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/move_up.rs:11:26: 11:26 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]

