# Analysing main
# Analysing immutability_span
# MaybeTopOfBorrowStack Analysis
[_1, _2] -> Left(Retag([fn entry] _1))
[_1, _2] -> Left(Retag([fn entry] _2))
[_1, _2] -> Left((*_1) = const 42_i32)
[_1, _2] -> Left(StorageLive(_5))
[_1, _2] -> Left(StorageLive(_6))
[_1, _2] -> Left(_6 = _3)
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:10:8: 10:12 (#4), scope: scope[0] }, kind: switchInt(move _6) -> [false: bb11, otherwise: bb1] })
[_1, _2] -> Left(StorageLive(_7))
[_1, _2] -> Left(StorageLive(_8))
[_1, _2] -> Left(StorageLive(_9))
[_1, _2] -> Left(StorageLive(_10))
[_1, _2] -> Left(Deinit(_10))
[_1, _2] -> Left((_10.0: i32) = const 0_i32)
[_1, _2] -> Left((_10.1: i32) = const 3_i32)
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:12:18: 12:22 (#6), scope: scope[1] }, kind: _9 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _10) -> bb2 })
[_1, _2] -> Left(StorageDead(_10))
[_1, _2] -> Left(StorageLive(_11))
[_1, _2] -> Left(_11 = move _9)
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:12:9: 14:10 (#5), scope: scope[2] }, kind: goto -> bb3 })
[_1, _2] -> Left(StorageLive(_13))
[_1, _2] -> Left(StorageLive(_14))
[_1, _2] -> Left(StorageLive(_15))
[_1, _2] -> Left(StorageLive(_16))
[_1, _2] -> Left(_16 = &mut _11)
[_1, _2] -> Left(Retag(_16))
[_1, _2] -> Left(_15 = &mut (*_16))
[_1, _2] -> Left(Retag([2phase] _15))
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:12:18: 12:22 (#6), scope: scope[2] }, kind: _14 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _15) -> bb4 })
[_1, _2] -> Left(StorageDead(_15))
[_1, _2] -> Left(_17 = discriminant(_14))
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:12:18: 12:22 (#6), scope: scope[2] }, kind: switchInt(move _17) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6] })
[_1, _2] -> Left(StorageLive(_19))
[_1, _2] -> Left(_19 = (*_1))
[_1, _2] -> Left(_7 = move _19)
[_1, _2] -> Left(StorageDead(_19))
[_1, _2] -> Left(_13 = const ())
[_1, _2] -> Left(StorageDead(_16))
[_1, _2] -> Left(StorageDead(_14))
[_1, _2] -> Left(StorageDead(_13))
[_1, _2] -> Left(_12 = const ())
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:12:9: 14:10 (#5), scope: scope[2] }, kind: goto -> bb3 })
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:12:18: 12:22 (#6), scope: scope[2] }, kind: unreachable })
[_1, _2] -> Left(_8 = const ())
[_1, _2] -> Left(StorageDead(_16))
[_1, _2] -> Left(StorageDead(_14))
[_1, _2] -> Left(StorageDead(_13))
[_1, _2] -> Left(StorageDead(_11))
[_1, _2] -> Left(StorageDead(_9))
[_1, _2] -> Left(StorageDead(_8))
[_1, _2] -> Left((*_1) = const 5_i32)
[_1, _2] -> Left(StorageLive(_20))
[_1, _2] -> Left(StorageLive(_21))
[_1, _2] -> Left(_21 = (*_2))
[_1, _2] -> Left(_20 = Eq(move _21, const 0_i32))
[_1, _2] -> Left(StorageDead(_21))
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:19:12: 19:19 (#8), scope: scope[3] }, kind: switchInt(move _20) -> [false: bb9, otherwise: bb8] })
[_1, _2] -> Left((*_2) = const 1_i32)
[_1, _2] -> Left(_5 = const ())
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:19:9: 21:10 (#0), scope: scope[3] }, kind: goto -> bb10 })
[_1, _2] -> Left(_5 = const ())
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:19:9: 21:10 (#0), scope: scope[3] }, kind: goto -> bb10 })
[_1, _2] -> Left(StorageDead(_20))
[_1, _2] -> Left(StorageDead(_7))
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:10:5: 33:6 (#0), scope: scope[0] }, kind: goto -> bb19 })
[_1, _2] -> Left((*_2) = const 7_i32)
[_1, _2] -> Left(StorageLive(_22))
[_1, _2] -> Left(StorageLive(_23))
[_2] -> Left(_23 = &mut (*_1))
[_2] -> Left(Retag([2phase] _23))
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:24:9: 24:18 (#0), scope: scope[0] }, kind: _22 = access(move _23) -> bb12 })
[_2] -> Left(StorageDead(_23))
[_2] -> Left(StorageDead(_22))
[_2] -> Left(StorageLive(_24))
[_2] -> Left(StorageLive(_25))
[_2] -> Left(StorageLive(_26))
[_2] -> Left(Deinit(_26))
[_2] -> Left((_26.0: i32) = const 0_i32)
[_2] -> Left((_26.1: i32) = const 5_i32)
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:26:18: 26:22 (#10), scope: scope[0] }, kind: _25 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _26) -> bb13 })
[_2] -> Left(StorageDead(_26))
[_2] -> Left(StorageLive(_27))
[_2] -> Left(_27 = move _25)
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:26:9: 29:10 (#9), scope: scope[4] }, kind: goto -> bb14 })
[_2] -> Left(StorageLive(_28))
[_2] -> Left(StorageLive(_29))
[_2] -> Left(StorageLive(_30))
[_2] -> Left(StorageLive(_31))
[_2] -> Left(_31 = &mut _27)
[_2] -> Left(Retag(_31))
[_2] -> Left(_30 = &mut (*_31))
[_2] -> Left(Retag([2phase] _30))
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:26:18: 26:22 (#10), scope: scope[4] }, kind: _29 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _30) -> bb15 })
[_2] -> Left(StorageDead(_30))
[_2] -> Left(_32 = discriminant(_29))
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:26:18: 26:22 (#10), scope: scope[4] }, kind: switchInt(move _32) -> [0_isize: bb18, 1_isize: bb16, otherwise: bb17] })
[_2] -> Left((*_2) = const 11_i32)
[_2] -> Left((*_1) = const 17_i32)
[_2] -> Left(_28 = const ())
[_2] -> Left(StorageDead(_31))
[_2] -> Left(StorageDead(_29))
[_2] -> Left(StorageDead(_28))
[_2] -> Left(_12 = const ())
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:26:9: 29:10 (#9), scope: scope[4] }, kind: goto -> bb14 })
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:26:18: 26:22 (#10), scope: scope[4] }, kind: unreachable })
[_2] -> Left(_24 = const ())
[_2] -> Left(StorageDead(_31))
[_2] -> Left(StorageDead(_29))
[_2] -> Left(StorageDead(_28))
[_2] -> Left(StorageDead(_27))
[_2] -> Left(StorageDead(_25))
[_2] -> Left(StorageDead(_24))
[_2] -> Left(StorageLive(_34))
[_2] -> Left(_34 = (*_1))
[_2] -> Left(_5 = const ())
[_2] -> Left(StorageDead(_34))
[_2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:10:5: 33:6 (#0), scope: scope[0] }, kind: goto -> bb19 })
[_1, _2] -> Left(StorageDead(_6))
[_1, _2] -> Left(StorageDead(_5))
[_1, _2] -> Left((*_2) = const 12_i32)
[_1, _2] -> Left(_0 = (*_1))
[_1, _2] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:38:2: 38:2 (#0), scope: scope[0] }, kind: return })

# FindImmutabilitySpans Analysis
bb0
[ 0] {} -> Retag([fn entry] _1)
[ 1] {} -> Retag([fn entry] _2)
[ 2] {_1: Span(bb0[2])} -> (*_1) = const 42_i32
[ 3] {_1: Span(bb0[2])} -> StorageLive(_5)
[ 4] {_1: Span(bb0[2])} -> StorageLive(_6)
[ 5] {_1: Span(bb0[2])} -> _6 = _3
[ 6] {_1: Span(bb0[2])} -> switchInt(move _6) -> [false: bb11, otherwise: bb1]

bb1
[ 0] {_1: Span(bb0[2])} -> StorageLive(_7)
[ 1] {_1: Span(bb0[2])} -> StorageLive(_8)
[ 2] {_1: Span(bb0[2])} -> StorageLive(_9)
[ 3] {_1: Span(bb0[2])} -> StorageLive(_10)
[ 4] {_1: Span(bb0[2])} -> Deinit(_10)
[ 5] {_1: Span(bb0[2])} -> (_10.0: i32) = const 0_i32
[ 6] {_1: Span(bb0[2])} -> (_10.1: i32) = const 3_i32
[ 7] {_1: Span(bb0[2])} -> _9 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _10) -> bb2

bb2
[ 0] {_1: Span(bb0[2])} -> StorageDead(_10)
[ 1] {_1: Span(bb0[2])} -> StorageLive(_11)
[ 2] {_1: Span(bb0[2])} -> _11 = move _9
[ 3] {_1: Span(bb0[2])} -> goto -> bb3

bb3
[ 0] {_1: Span(bb0[2])} -> StorageLive(_13)
[ 1] {_1: Span(bb0[2])} -> StorageLive(_14)
[ 2] {_1: Span(bb0[2])} -> StorageLive(_15)
[ 3] {_1: Span(bb0[2])} -> StorageLive(_16)
[ 4] {_1: Span(bb0[2])} -> _16 = &mut _11
[ 5] {_1: Span(bb0[2])} -> Retag(_16)
[ 6] {_1: Span(bb0[2])} -> _15 = &mut (*_16)
[ 7] {_1: Span(bb0[2])} -> Retag([2phase] _15)
[ 8] {_1: Span(bb0[2])} -> _14 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _15) -> bb4

bb4
[ 0] {_1: Span(bb0[2])} -> StorageDead(_15)
[ 1] {_1: Span(bb0[2])} -> _17 = discriminant(_14)
[ 2] {_1: Span(bb0[2])} -> switchInt(move _17) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]

bb6
[ 0] {_1: Span(bb0[2])} -> unreachable

bb5
[ 0] {_1: Span(bb0[2])} -> StorageLive(_19)
[ 1] {_1: Span(bb0[2])} -> _19 = (*_1)
[ 2] {_1: Span(bb0[2])} -> _7 = move _19
[ 3] {_1: Span(bb0[2])} -> StorageDead(_19)
[ 4] {_1: Span(bb0[2])} -> _13 = const ()
[ 5] {_1: Span(bb0[2])} -> StorageDead(_16)
[ 6] {_1: Span(bb0[2])} -> StorageDead(_14)
[ 7] {_1: Span(bb0[2])} -> StorageDead(_13)
[ 8] {_1: Span(bb0[2])} -> _12 = const ()
[ 9] {_1: Span(bb0[2])} -> goto -> bb3

bb7
[ 0] {_1: Span(bb0[2])} -> _8 = const ()
[ 1] {_1: Span(bb0[2])} -> StorageDead(_16)
[ 2] {_1: Span(bb0[2])} -> StorageDead(_14)
[ 3] {_1: Span(bb0[2])} -> StorageDead(_13)
[ 4] {_1: Span(bb0[2])} -> StorageDead(_11)
[ 5] {_1: Span(bb0[2])} -> StorageDead(_9)
[ 6] {_1: Span(bb0[2])} -> StorageDead(_8)
[ 7] {_1: Span(bb7[7])} -> (*_1) = const 5_i32
[ 8] {_1: Span(bb7[7])} -> StorageLive(_20)
[ 9] {_1: Span(bb7[7])} -> StorageLive(_21)
[10] {_1: Span(bb7[7])} -> _21 = (*_2)
[11] {_1: Span(bb7[7])} -> _20 = Eq(move _21, const 0_i32)
[12] {_1: Span(bb7[7])} -> StorageDead(_21)
[13] {_1: Span(bb7[7])} -> switchInt(move _20) -> [false: bb9, otherwise: bb8]

bb8
[ 0] {_2: Span(bb8[0]), _1: Span(bb7[7])} -> (*_2) = const 1_i32
[ 1] {_2: Span(bb8[0]), _1: Span(bb7[7])} -> _5 = const ()
[ 2] {_2: Span(bb8[0]), _1: Span(bb7[7])} -> goto -> bb10

bb10
[ 0] {_2: Span(bb8[0]), _1: Span(bb7[7])} -> StorageDead(_20)
[ 1] {_2: Span(bb8[0]), _1: Span(bb7[7])} -> StorageDead(_7)
[ 2] {_2: Span(bb8[0]), _1: Span(bb7[7])} -> goto -> bb19

bb19
[ 0] {_2: Top, _1: Top} -> StorageDead(_6)
[ 1] {_2: Top, _1: Top} -> StorageDead(_5)
[ 2] {_2: Span(bb19[2]), _1: Top} -> (*_2) = const 12_i32
[ 3] {_2: Span(bb19[2]), _1: Top} -> _0 = (*_1)
[ 4] {_2: Span(bb19[2]), _1: Top} -> return

bb9
[ 0] {_1: Span(bb7[7])} -> _5 = const ()
[ 1] {_1: Span(bb7[7])} -> goto -> bb10

bb11
[ 0] {_2: Span(bb11[0]), _1: Span(bb0[2])} -> (*_2) = const 7_i32
[ 1] {_2: Span(bb11[0]), _1: Span(bb0[2])} -> StorageLive(_22)
[ 2] {_2: Span(bb11[0]), _1: Span(bb0[2])} -> StorageLive(_23)
[ 3] {_2: Span(bb11[0]), _1: Top} -> _23 = &mut (*_1)
[ 4] {_2: Span(bb11[0]), _1: Top} -> Retag([2phase] _23)
[ 5] {_2: Span(bb11[0]), _1: Top} -> _22 = access(move _23) -> bb12

bb12
[ 0] {_2: Span(bb11[0]), _1: Top} -> StorageDead(_23)
[ 1] {_2: Span(bb11[0]), _1: Top} -> StorageDead(_22)
[ 2] {_2: Span(bb11[0]), _1: Top} -> StorageLive(_24)
[ 3] {_2: Span(bb11[0]), _1: Top} -> StorageLive(_25)
[ 4] {_2: Span(bb11[0]), _1: Top} -> StorageLive(_26)
[ 5] {_2: Span(bb11[0]), _1: Top} -> Deinit(_26)
[ 6] {_2: Span(bb11[0]), _1: Top} -> (_26.0: i32) = const 0_i32
[ 7] {_2: Span(bb11[0]), _1: Top} -> (_26.1: i32) = const 5_i32
[ 8] {_2: Span(bb11[0]), _1: Top} -> _25 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _26) -> bb13

bb13
[ 0] {_2: Span(bb11[0]), _1: Top} -> StorageDead(_26)
[ 1] {_2: Span(bb11[0]), _1: Top} -> StorageLive(_27)
[ 2] {_2: Span(bb11[0]), _1: Top} -> _27 = move _25
[ 3] {_2: Span(bb11[0]), _1: Top} -> goto -> bb14

bb14
[ 0] {_2: Top, _1: Top} -> StorageLive(_28)
[ 1] {_2: Top, _1: Top} -> StorageLive(_29)
[ 2] {_2: Top, _1: Top} -> StorageLive(_30)
[ 3] {_2: Top, _1: Top} -> StorageLive(_31)
[ 4] {_2: Top, _1: Top} -> _31 = &mut _27
[ 5] {_2: Top, _1: Top} -> Retag(_31)
[ 6] {_2: Top, _1: Top} -> _30 = &mut (*_31)
[ 7] {_2: Top, _1: Top} -> Retag([2phase] _30)
[ 8] {_2: Top, _1: Top} -> _29 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _30) -> bb15

bb15
[ 0] {_2: Top, _1: Top} -> StorageDead(_30)
[ 1] {_2: Top, _1: Top} -> _32 = discriminant(_29)
[ 2] {_2: Top, _1: Top} -> switchInt(move _32) -> [0_isize: bb18, 1_isize: bb16, otherwise: bb17]

bb17
[ 0] {_2: Top, _1: Top} -> unreachable

bb16
[ 0] {_2: Span(bb16[0]), _1: Top} -> (*_2) = const 11_i32
[ 1] {_2: Span(bb16[0]), _1: Top} -> (*_1) = const 17_i32
[ 2] {_2: Span(bb16[0]), _1: Top} -> _28 = const ()
[ 3] {_2: Span(bb16[0]), _1: Top} -> StorageDead(_31)
[ 4] {_2: Span(bb16[0]), _1: Top} -> StorageDead(_29)
[ 5] {_2: Span(bb16[0]), _1: Top} -> StorageDead(_28)
[ 6] {_2: Span(bb16[0]), _1: Top} -> _12 = const ()
[ 7] {_2: Span(bb16[0]), _1: Top} -> goto -> bb14

bb18
[ 0] {_2: Top, _1: Top} -> _24 = const ()
[ 1] {_2: Top, _1: Top} -> StorageDead(_31)
[ 2] {_2: Top, _1: Top} -> StorageDead(_29)
[ 3] {_2: Top, _1: Top} -> StorageDead(_28)
[ 4] {_2: Top, _1: Top} -> StorageDead(_27)
[ 5] {_2: Top, _1: Top} -> StorageDead(_25)
[ 6] {_2: Top, _1: Top} -> StorageDead(_24)
[ 7] {_2: Top, _1: Top} -> StorageLive(_34)
[ 8] {_2: Top, _1: Top} -> _34 = (*_1)
[ 9] {_2: Top, _1: Top} -> _5 = const ()
[10] {_2: Top, _1: Top} -> StorageDead(_34)
[11] {_2: Top, _1: Top} -> goto -> bb19


# CFG Before
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            (*_1) = const 42_i32,
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:10:8: 10:12 (#4),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [false: bb11, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            Deinit(_10),
            (_10.0: i32) = const 0_i32,
            (_10.1: i32) = const 3_i32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[1],
                },
                kind: _9 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _10) -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:9: 14:10 (#5),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _11,
            Retag(_16),
            _15 = &mut (*_16),
            Retag([2phase] _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[2],
                },
                kind: _14 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _15) -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _17 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[2],
                },
                kind: switchInt(move _17) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = (*_1),
            _7 = move _19,
            StorageDead(_19),
            _13 = const (),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:9: 14:10 (#5),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = const (),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            (*_1) = const 5_i32,
            StorageLive(_20),
            StorageLive(_21),
            _21 = (*_2),
            _20 = Eq(move _21, const 0_i32),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:19:12: 19:19 (#8),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [false: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 1_i32,
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:19:9: 21:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:19:9: 21:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:10:5: 33:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 7_i32,
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut (*_1),
            Retag([2phase] _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:24:9: 24:18 (#0),
                    scope: scope[0],
                },
                kind: _22 = access(move _23) -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            Deinit(_26),
            (_26.0: i32) = const 0_i32,
            (_26.1: i32) = const 5_i32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[0],
                },
                kind: _25 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _26) -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_27),
            _27 = move _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:9: 29:10 (#9),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &mut _27,
            Retag(_31),
            _30 = &mut (*_31),
            Retag([2phase] _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[4],
                },
                kind: _29 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _30) -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _32 = discriminant(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[4],
                },
                kind: switchInt(move _32) -> [0_isize: bb18, 1_isize: bb16, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 11_i32,
            (*_1) = const 17_i32,
            _28 = const (),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:9: 29:10 (#9),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_34),
            _34 = (*_1),
            _5 = const (),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:10:5: 33:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            (*_2) = const 12_i32,
            _0 = (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:38:2: 38:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
# CFG After
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            Retag([fn entry] _2),
            (*_1) = const 42_i32,
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:10:8: 10:12 (#4),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [false: bb11, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            Deinit(_10),
            (_10.0: i32) = const 0_i32,
            (_10.1: i32) = const 3_i32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[1],
                },
                kind: _9 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _10) -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            _11 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:9: 14:10 (#5),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _11,
            Retag(_16),
            _15 = &mut (*_16),
            Retag([2phase] _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[2],
                },
                kind: _14 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _15) -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _17 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[2],
                },
                kind: switchInt(move _17) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = (*_1),
            _7 = move _19,
            StorageDead(_19),
            _13 = const (),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:9: 14:10 (#5),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:12:18: 12:22 (#6),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = const (),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            (*_1) = const 5_i32,
            StorageLive(_20),
            StorageLive(_21),
            _21 = (*_2),
            _20 = Eq(move _21, const 0_i32),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:19:12: 19:19 (#8),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [false: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 1_i32,
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:19:9: 21:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:19:9: 21:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:10:5: 33:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 7_i32,
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut (*_1),
            Retag([2phase] _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:24:9: 24:18 (#0),
                    scope: scope[0],
                },
                kind: _22 = access(move _23) -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            Deinit(_26),
            (_26.0: i32) = const 0_i32,
            (_26.1: i32) = const 5_i32,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[0],
                },
                kind: _25 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _26) -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_27),
            _27 = move _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:9: 29:10 (#9),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &mut _27,
            Retag(_31),
            _30 = &mut (*_31),
            Retag([2phase] _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[4],
                },
                kind: _29 = <std::ops::Range<i32> as std::iter::Iterator>::next(move _30) -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _32 = discriminant(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[4],
                },
                kind: switchInt(move _32) -> [0_isize: bb18, 1_isize: bb16, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2) = const 11_i32,
            (*_1) = const 17_i32,
            _28 = const (),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:9: 29:10 (#9),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:26:18: 26:22 (#10),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_34),
            _34 = (*_1),
            _5 = const (),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:10:5: 33:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            (*_2) = const 12_i32,
            _0 = (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:38:2: 38:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]

# Analysing access
# MaybeTopOfBorrowStack Analysis
[_1] -> Left(Retag([fn entry] _1))
[_1] -> Left((*_1) = const 5_i32)
[_1] -> Left(_0 = const ())
[_1] -> Right(Terminator { source_info: SourceInfo { span: $DIR/immutability_span.rs:5:2: 5:2 (#0), scope: scope[0] }, kind: return })

# FindImmutabilitySpans Analysis
bb0
[ 0] {} -> Retag([fn entry] _1)
[ 1] {_1: Span(bb0[1])} -> (*_1) = const 5_i32
[ 2] {_1: Span(bb0[1])} -> _0 = const ()
[ 3] {_1: Span(bb0[1])} -> return


# CFG Before
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            (*_1) = const 5_i32,
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:5:2: 5:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
# CFG After
[
    BasicBlockData {
        statements: [
            Retag([fn entry] _1),
            (*_1) = const 5_i32,
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: $DIR/immutability_span.rs:5:2: 5:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]

